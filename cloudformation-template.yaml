AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS News to Slack Bot - Infrastructure as Code'

Parameters:
  FunctionName:
    Type: String
    Default: 'aws-news-to-slack'
    Description: 'Lambda 함수 이름'
  
  SlackWebhookUrl:
    Type: String
    NoEcho: true
    Description: 'Slack Webhook URL (필수)'
  
  ScheduleExpression:
    Type: String
    Default: 'cron(0 0 * * ? *)'
    Description: '실행 스케줄 (기본: 매일 오전 9시 KST)'
  
  # AWS 설정 파라미터 (필수)
  AWSRegion:
    Type: String
    Default: 'ap-northeast-2'
    Description: 'AWS 리전 (필수)'
  
  DynamoDBTableName:
    Type: String
    Default: 'ProcessedNews'
    Description: 'DynamoDB 테이블명 (필수)'
  
  BedrockModelId:
    Type: String
    Default: 'anthropic.claude-3-haiku-20240307-v1:0'
    Description: 'Bedrock 모델 ID (필수)'
  
  # 성능 설정 파라미터 (선택적)
  
  MaxRetries:
    Type: Number
    Default: 3
    Description: '최대 재시도 횟수'
  
  RetryDelayBase:
    Type: Number
    Default: 2
    Description: '재시도 딜레이 기본값 (초)'
  
  MaxSlackLength:
    Type: Number
    Default: 3900
    Description: 'Slack 메시지 최대 길이'
  
  ContentMaxLength:
    Type: Number
    Default: 3000
    Description: '본문 최대 길이'
  
  RequestTimeout:
    Type: Number
    Default: 10
    Description: 'HTTP 요청 타임아웃 (초)'
  
  ProcessingDelay:
    Type: Number
    Default: 12
    Description: '뉴스 처리 간 딜레이 (초)'

Resources:
  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${FunctionName}-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Scan
                Resource: !GetAtt ProcessedNewsTable.Arn
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: 
                  - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-3-haiku-20240307-v1:0'

  # DynamoDB Table
  ProcessedNewsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ProcessedNews
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Project
          Value: aws-news-to-slack
        - Key: Environment
          Value: production

  # Lambda Function
  NewsProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref FunctionName
      Runtime: python3.9
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          SLACK_WEBHOOK: !Ref SlackWebhookUrl
          AWS_REGION: !Ref AWSRegion
          DYNAMODB_TABLE: !Ref DynamoDBTableName
          BEDROCK_MODEL_ID: !Ref BedrockModelId
          MAX_RETRIES: !Ref MaxRetries
          RETRY_DELAY_BASE: !Ref RetryDelayBase
          MAX_SLACK_LENGTH: !Ref MaxSlackLength
          CONTENT_MAX_LENGTH: !Ref ContentMaxLength
          REQUEST_TIMEOUT: !Ref RequestTimeout
          PROCESSING_DELAY: !Ref ProcessingDelay
      Code:
        ZipFile: |
          # 실제 배포 시에는 별도의 ZIP 파일을 업로드해야 합니다
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'Please upload the actual code'}
      Tags:
        - Key: Project
          Value: aws-news-to-slack
        - Key: Environment
          Value: production

  # EventBridge Rule
  NewsScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${FunctionName}-schedule'
      Description: 'AWS 뉴스 처리를 위한 정기 실행 규칙'
      ScheduleExpression: !Ref ScheduleExpression
      State: ENABLED
      Targets:
        - Arn: !GetAtt NewsProcessorFunction.Arn
          Id: NewsProcessorTarget

  # Lambda Permission for EventBridge
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NewsProcessorFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt NewsScheduleRule.Arn

  # CloudWatch Log Group
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${FunctionName}'
      RetentionInDays: 14

Outputs:
  LambdaFunctionArn:
    Description: 'Lambda 함수 ARN'
    Value: !GetAtt NewsProcessorFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionArn'

  DynamoDBTableName:
    Description: 'DynamoDB 테이블 이름'
    Value: !Ref ProcessedNewsTable
    Export:
      Name: !Sub '${AWS::StackName}-DynamoDBTableName'

  EventBridgeRuleArn:
    Description: 'EventBridge 규칙 ARN'
    Value: !GetAtt NewsScheduleRule.Arn
    Export:
      Name: !Sub '${AWS::StackName}-EventBridgeRuleArn'

  CloudWatchLogGroup:
    Description: 'CloudWatch 로그 그룹'
    Value: !Ref LambdaLogGroup
    Export:
      Name: !Sub '${AWS::StackName}-LogGroup'